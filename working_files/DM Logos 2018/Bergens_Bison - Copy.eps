%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Bergens_Bison - Copy.pdf
%%Creator: Adobe Acrobat 15.23.0
%%For: aomurtagh
%%CreationDate: 31/01/2017, 10:04:52 AM
%%BoundingBox: 0 0 800 600
%%HiResBoundingBox: 0 0 800 600
%%CropBox: 0 0 800 600
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 27852 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:CreatorTool="Adobe Illustrator CS6 (Macintosh)"
   xmp:CreateDate="2013-01-18T11:01:56-07:00"
   xmp:ModifyDate="2013-01-18T11:01:56-07:00"
   xmp:MetadataDate="2013-01-18T11:01:56-07:00"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   dc:format="application/pdf"
   xmpMM:RenditionClass="proof:pdf"
   xmpMM:DocumentID="xmp.did:0280117407206811822AFB4C7D4F4637"
   xmpMM:InstanceID="uuid:e5a8f123-a85f-7141-a4b7-748c561cc30f"
   xmpMM:OriginalDocumentID="uuid:24025f38-7398-6e43-bd33-8242a3791240"
   pdf:Producer="Adobe PDF library 10.01">
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="176"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAsAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FUj8wectB0ONzeXAMqAs0KEFgB3YkhVH+scIFoJeK+b/+cp9OtneHSAJWGwNu&#xA;BJT5yyUT/gVOZEdMTzapZgHles/85Fedb9mEQWOM9FmklmI+QBjT/hcvGmDUc5Y7J+bnnd2qLmJT&#xA;3pChqf8AZA5LwIsfFkjbH86/PVkwYPE1OpKPGfvjZN8HgQLMzmOYZ35b/wCcp9atXRNTilKftMGF&#xA;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"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpTPg:MaxPageSize
    stDim:w="800.000000"
    stDim:h="600.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:Fonts>
    <rdf:Bag>
     <rdf:li
      stFnt:fontName="BirchStd"
      stFnt:fontFamily="Birch Std"
      stFnt:fontFace="Regular"
      stFnt:fontType="Open Type"
      stFnt:versionString="Version 2.066;PS 002.000;hotconv 1.0.67;makeotf.lib2.5.33168"
      stFnt:composite="False"
      stFnt:fontFileName="BirchStd.otf"/>
    </rdf:Bag>
   </xmpTPg:Fonts>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Bergens_Bison</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmpMM:DerivedFrom
    stRef:instanceID="uuid:e4968d92-1456-7443-b1d3-c3fd969b92c2"
    stRef:documentID="xmp.did:FA7F117407206811808383C15B7F2CE1"
    stRef:originalDocumentID="uuid:24025f38-7398-6e43-bd33-8242a3791240"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:F97F117407206811808383C15B7F2CE1"
      stEvt:when="2012-11-26T10:10:02-07:00"
      stEvt:softwareAgent="Adobe Illustrator CS5.1"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:0280117407206811822AFB4C7D4F4637"
      stEvt:when="2013-01-18T11:01:54-07:00"
      stEvt:softwareAgent="Adobe Illustrator CS6 (Macintosh)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -600 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 600 li
800 600 li
800 0 li
cp
clp
gsave
0 0 mo
800 0 li
800 600 li
0 600 li
cp
clp
398.478 100.885 mo
420.803 92.7738 445.22 90.1998 468.664 94.3008 cv
491.481 98.1108 513.059 107.627 532.359 120.222 cv
533.138 120.745 534.008 121.214 535 121.013 cv
564.479 118.098 594.781 121.026 622.703 131.175 cv
622.138 128.892 621.462 126.642 620.891 124.36 cv
625.691 125.729 630.486 127.158 635.184 128.85 cv
653.517 136.103 670.207 148.406 681.051 165.035 cv
682.297 166.801 683.069 168.972 684.834 170.329 cv
690.103 174.564 695.684 178.47 700.351 183.399 cv
705.644 188.954 710.402 195.234 713.109 202.481 cv
715.221 208.042 716.013 214.291 714.302 220.071 cv
712.069 228.529 705.443 235.022 698.172 239.457 cv
692.599 243.029 686.35 245.311 680.21 247.666 cv
677.764 250.58 675.415 253.653 672.179 255.777 cv
672.336 259.135 672.561 262.537 671.916 265.864 cv
670.682 272.016 667.493 277.681 663.179 282.202 cv
658.907 286.534 654.216 290.855 651.916 296.623 cv
650.298 301.91 650.207 307.947 646.525 312.395 cv
642.759 317.244 636.541 319.178 630.662 319.768 cv
628.101 323.748 624.085 326.638 619.619 328.111 cv
614.916 329.821 609.865 329.839 604.936 330.149 cv
604.729 332.364 604.012 334.469 603.135 336.501 cv
636.595 331.658 670.049 326.748 703.502 321.887 cv
704.501 321.752 705.51 321.649 706.526 321.546 cv
698.062 330.453 689.38 339.149 680.795 347.935 cv
679.133 349.688 677.277 351.27 675.951 353.314 cv
680.368 356.764 683.892 361.455 689.124 363.791 cv
695.701 366.846 703.131 366.45 710.189 366.14 cv
728.856 378.012 741.732 398.991 742.882 421.194 cv
743.114 426.67 742.991 432.158 742.955 437.642 cv
741.173 436.697 739.414 435.718 737.655 434.744 cv
727.792 440.787 716.237 443.525 704.78 444.152 cv
696.292 444.614 687.743 443.951 679.437 442.162 cv
676.218 456.534 673.365 470.986 670.243 485.375 cv
557.409 499.388 444.539 513.14 331.692 527.043 cv
318.732 528.601 305.79 530.329 292.811 531.735 cv
310.573 520.24 328.461 508.936 346.283 497.532 cv
256.468 507.98 166.688 518.671 76.878 529.143 cv
86.431 519.766 96.045 510.444 105.683 501.153 cv
109.626 497.156 113.873 493.431 117.652 489.294 cv
123.828 461.134 129.645 432.871 135.632 404.662 cv
125.884 395.955 116.021 387.376 106.437 378.486 cv
119.112 376.363 131.811 374.366 144.516 372.462 cv
142.672 370.406 140.457 368.725 138.589 366.688 cv
132.079 359.909 126.974 351.489 125.306 342.142 cv
123.305 331.414 126.042 320.225 131.476 310.904 cv
137.275 300.888 145.629 292.546 155.018 285.871 cv
162.119 280.894 169.907 276.726 178.346 274.56 cv
181.212 273.629 184.431 272.491 186.044 269.752 cv
186.257 266.589 183.445 264.374 181.218 262.585 cv
176.405 258.886 173.272 253.172 172.718 247.13 cv
172.45 244.118 172.615 241.075 173.138 238.1 cv
173.765 234.425 173.783 230.69 174.026 226.984 cv
174.969 227.385 175.913 227.799 176.855 228.219 cv
174.617 221.033 175.164 213.068 178.2 206.192 cv
182.374 196.365 190.352 188.991 197.008 180.886 cv
198.097 188.693 197.824 196.737 200.178 204.337 cv
202.484 212.113 206.403 219.883 213.126 224.732 cv
216.68 227.379 220.964 228.864 225.332 229.429 cv
227.729 229.569 229.385 231.443 231.028 232.959 cv
236.595 238.429 241.171 245.372 242.223 253.245 cv
242.947 257.188 242.126 261.185 241.006 264.964 cv
251.174 256.227 260.739 246.618 268.552 235.684 cv
272.19 230.829 274.776 225.317 278.056 220.23 cv
287.724 206.576 298.951 194.047 311.272 182.748 cv
307.98 181.963 304.719 181.051 301.451 180.175 cv
309.83 167.068 320.077 155.245 331.187 144.39 cv
350.524 125.759 373.117 110.073 398.478 100.885 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
.423713 .332128 .299962 .00485237 cmyk
f
401.131 106.556 mo
412.296 102.607 423.96 99.9777 435.777 99.0297 cv
440.852 98.9497 445.92 98.1887 451 98.7547 cv
472.303 99.4547 493.131 105.869 512.006 115.579 cv
519.039 119.188 525.776 123.337 532.401 127.651 cv
544.327 126.014 556.418 125.948 568.423 126.538 cv
590.369 127.846 612.22 132.629 632.238 141.847 cv
631.594 139.073 630.754 136.353 630.012 133.615 cv
646.167 139.37 661.044 149.283 671.759 162.76 cv
678.555 171.382 683.447 181.531 685.698 192.289 cv
686.691 196.408 686.988 200.643 687.512 204.836 cv
690.408 202.621 691.735 198.976 692.111 195.459 cv
692.573 191.066 691.418 186.728 690.243 182.535 cv
696.773 188.054 702.656 194.607 706.338 202.396 cv
709.222 208.45 710.026 215.867 706.945 222.013 cv
703.77 228.365 697.771 232.703 691.668 236.001 cv
686.672 238.575 681.445 240.711 676.049 242.268 cv
673.724 246.101 670.767 249.698 666.721 251.785 cv
666.081 252.308 664.493 252.624 665.119 253.768 cv
666.855 259.147 666.367 265.117 663.94 270.203 cv
660.399 278.199 652.294 282.732 648.077 290.283 cv
644.578 295.332 645.095 301.85 642.497 307.246 cv
639.284 312.71 632.269 313.647 626.501 313.556 cv
625.479 317.354 622.473 320.341 618.846 321.729 cv
612.214 324.345 604.852 323.973 597.922 323.006 cv
599.57 327.485 598.931 332.809 595.657 336.392 cv
590.193 342.446 582.053 345.118 574.294 346.748 cv
585.193 345.733 595.962 343.724 606.805 342.282 cv
634.308 338.26 661.822 334.269 689.324 330.234 cv
681.33 338.571 673.225 346.809 665.126 355.047 cv
667.518 355.985 670.152 356.575 672.166 358.266 cv
674.831 360.426 677.21 362.922 679.815 365.155 cv
683.508 368.301 687.969 370.503 692.702 371.574 cv
697.977 372.875 703.442 372.584 708.809 372.766 cv
716.871 378.073 723.358 385.629 728.267 393.898 cv
734.145 403.883 737.066 415.535 736.779 427.103 cv
729.119 422.971 721.573 418.633 713.864 414.599 cv
717.978 420.361 722.535 425.801 726.782 431.459 cv
727.269 431.946 727.585 433.175 726.607 433.327 cv
713.883 438.249 699.827 439.017 686.404 437.106 cv
682.34 436.588 678.408 435.409 674.363 434.812 cv
673.365 441.298 671.697 447.662 670.462 454.112 cv
668.588 462.667 666.957 471.278 664.956 479.808 cv
573.138 491.034 481.339 502.358 389.527 513.645 cv
366.095 516.566 342.633 519.291 319.225 522.37 cv
328.036 516.365 337.169 510.84 346.113 505.029 cv
354.839 499.48 363.515 493.852 372.283 488.369 cv
362.803 488.905 353.414 490.504 343.965 491.46 cv
260.776 501.25 177.586 511.017 94.3959 520.837 cv
103.614 511.807 112.894 502.845 122.179 493.888 cv
123.025 493.158 123.627 492.197 123.791 491.089 cv
129.931 461.487 136.417 431.952 142.435 402.331 cv
134.975 395.852 127.68 389.177 120.28 382.623 cv
133.983 380.367 147.698 378.139 161.443 376.161 cv
151.817 370.594 142.587 363.658 136.624 354.092 cv
131.86 346.676 129.839 337.482 131.422 328.774 cv
133.448 317.334 140.269 307.314 148.513 299.373 cv
156.618 291.566 166.226 285.068 176.953 281.491 cv
181.833 280.066 187.163 278.545 190.479 274.413 cv
193.12 271.231 192.713 266.48 190.449 263.212 cv
187.875 258.91 182.66 256.939 180.592 252.26 cv
178.11 247.519 178.772 242.013 179.606 236.951 cv
184.918 239.293 190.278 241.825 196.108 242.543 cv
190.99 238.74 186.068 234.248 183.586 228.231 cv
181.164 222.798 181.152 216.5 183.099 210.92 cv
184.943 205.383 188.35 200.54 192.073 196.11 cv
193.552 206.247 196.881 216.482 203.616 224.386 cv
208.192 229.777 214.507 233.744 221.493 235.082 cv
222.886 235.423 224.511 235.38 225.594 236.47 cv
229.397 239.895 232.676 244.027 234.618 248.803 cv
236.869 254.237 236.668 260.742 233.674 265.865 cv
230.364 271.761 224.852 275.978 219.205 279.482 cv
205.514 287.38 190.985 293.678 177.063 301.151 cv
169.974 305.086 162.88 309.504 157.804 315.965 cv
153.339 321.576 151.422 328.909 151.775 336.008 cv
151.78 342.489 154.342 349.036 159.198 353.405 cv
165.185 358.838 173.533 361.162 181.505 360.902 cv
184.06 360.713 186.89 360.518 189.001 358.91 cv
189.707 356.308 189.621 353.569 190.157 350.935 cv
193.814 329.535 203.233 308.902 218.116 292.972 cv
222.74 287.824 228.161 283.498 233.626 279.281 cv
247.553 268.195 260.958 256.178 271.734 241.928 cv
275.902 236.561 279.2 230.61 282.565 224.732 cv
290.195 213.72 298.982 203.521 308.443 194.047 cv
313.736 188.882 319.365 183.977 325.845 180.345 cv
321.178 178.708 316.292 177.807 311.564 176.353 cv
320.29 164.226 330.573 153.286 341.604 143.228 cv
359.006 127.56 379.026 114.514 401.131 106.556 cv
1 .876097 .416907 .506401 cmyk
f
423.066 117.672 mo
442.433 112.494 463.048 111.241 482.67 115.798 cv
493.02 118.177 503.164 121.84 512.358 127.189 cv
506.224 131.022 500.504 135.543 495.114 140.368 cv
492.905 142.674 490.21 144.633 488.664 147.487 cv
488.36 147.664 487.751 148.023 487.447 148.199 cv
493.574 146.952 499.611 145.284 505.787 144.262 cv
523.426 141.02 541.364 139.316 559.307 139.735 cv
585.07 140.222 611.289 145.255 633.978 157.91 cv
637.91 160.015 641.481 162.711 645.327 164.956 cv
645.461 165.157 645.728 165.559 645.862 165.76 cv
646.02 163.094 646.007 160.423 646.02 157.758 cv
648.946 158.318 651.29 160.265 653.674 161.92 cv
667.097 171.869 675.08 188.06 676.522 204.537 cv
677.782 215.051 676.291 226.375 670.261 235.307 cv
665.691 242.128 658.372 246.747 650.601 249.089 cv
644.754 250.762 638.633 251.335 632.567 251.128 cv
632.597 255.964 633.729 261.423 630.742 265.651 cv
627.663 270.343 625.338 275.643 624.791 281.265 cv
624.712 282.665 625.156 284.015 625.406 285.378 cv
627.997 280.486 631.775 276.117 636.541 273.227 cv
640.963 269.929 644.767 265.183 645.515 259.567 cv
645.685 258.904 645.655 257.839 646.555 257.711 cv
648.625 256.994 650.772 256.555 652.853 255.855 cv
653.589 257.997 653.011 260.248 652.646 262.408 cv
651.661 267.142 649.677 271.724 646.61 275.484 cv
643.513 279.452 639.138 282.233 636.345 286.474 cv
634.496 288.792 633.674 291.682 633.145 294.554 cv
632.962 294.39 632.597 294.055 632.408 293.891 cv
630.431 293.471 628.459 292.99 626.452 292.729 cv
622.733 292.321 618.956 292.929 615.256 292.357 cv
613.309 291.566 611.283 290.733 609.725 289.29 cv
605.503 284.441 599.204 281.496 592.815 281.101 cv
586.019 281.083 581.254 288.798 583.263 295.016 cv
584.742 300.523 589.712 304.016 594.574 306.388 cv
595.322 306.534 596.084 306.693 596.843 306.845 cv
595.493 307.058 594.148 307.283 592.822 307.587 cv
588.258 307.672 583.554 306.735 579.721 304.156 cv
576.776 302.3 574.598 299.5 572.828 296.562 cv
569.048 296.927 565.781 299.099 562.714 301.161 cv
557.908 304.709 553.539 309.096 550.734 314.414 cv
554.883 314.852 559.058 314.907 563.219 315.18 cv
568.763 316.081 574.988 316.356 579.465 320.146 cv
581.078 321.315 581.334 323.438 580.835 325.238 cv
579.746 327.484 577.616 328.975 575.553 330.252 cv
569.797 333.563 563.305 335.291 556.868 336.696 cv
554.44 337.067 552.017 337.482 549.584 337.785 cv
546.579 338.424 543.475 337.926 540.475 338.559 cv
535.795 338.99 531.147 338.133 526.48 337.949 cv
524.685 337.548 522.818 337.561 521.053 337.067 cv
520.852 336.971 520.462 336.776 520.262 336.678 cv
519.969 336.373 519.379 335.772 519.082 335.474 cv
524.527 334.25 530.205 333.672 535.328 331.299 cv
536.636 330.66 537.999 330.137 539.392 329.693 cv
535.479 329.717 531.586 330.551 527.679 329.912 cv
523.079 329.645 518.462 328.889 514.256 326.936 cv
507.898 323.834 500.638 323.291 493.672 323.619 cv
491.104 323.869 488.543 324.223 485.962 324.204 cv
487.854 322.884 489.51 321.193 491.633 320.207 cv
496.008 317.955 500.956 317.19 505.823 316.945 cv
508.866 316.799 511.877 317.486 514.92 317.341 cv
523.261 316.848 531.804 315.674 539.289 311.725 cv
543.341 302.057 551.488 294.365 561.066 290.264 cv
563.044 289.285 565.154 288.639 567.351 288.384 cv
560.5 287.581 553.667 288.974 547.108 290.867 cv
540.226 293.099 533.977 296.951 528.762 301.953 cv
520.451 285.914 507.113 271.828 489.991 265.335 cv
497.797 274.383 503.578 285.214 506.529 296.811 cv
507.229 299.756 508.056 302.713 508.045 305.774 cv
496.812 308.585 486.212 313.745 476.927 320.651 cv
473.136 323.529 469.382 326.51 466.224 330.101 cv
479.019 331.007 492.157 332.369 503.919 337.859 cv
502.056 339.873 499.879 341.539 497.955 343.486 cv
497.658 343.657 497.068 344.01 496.775 344.18 cv
504.837 344.266 512.906 344.023 520.967 344.277 cv
531.506 345.129 542.27 345.75 552.28 349.475 cv
527.229 350.606 502.118 353.113 477.718 359.136 cv
476.976 359.94 li
476.927 359.537 476.83 358.741 476.781 358.34 cv
480.096 355.644 483.353 352.882 486.589 350.095 cv
486.62 349.888 486.686 349.481 486.717 349.273 cv
467.156 343.182 446.334 342.61 426.064 344.29 cv
410.331 345.829 394.826 349.322 379.785 354.153 cv
379.006 354.451 378.228 354.744 377.461 355.053 cv
377.144 355.127 376.511 355.278 376.189 355.352 cv
373.372 356.465 370.469 357.365 367.664 358.527 cv
366.307 359.094 364.871 359.428 363.399 359.465 cv
363.728 359.282 364.373 358.91 364.701 358.729 cv
374.096 347.411 385.328 337.817 396.591 328.427 cv
397.334 327.8 398.167 327.295 399.007 326.809 cv
392.009 323.242 383.898 322.53 376.165 323.084 cv
373.926 323.481 371.692 323.863 369.478 324.332 cv
364.367 325.701 359.475 327.813 354.996 330.617 cv
350.755 333.289 346.24 335.601 341.409 336.988 cv
335.945 338.674 330.097 338.479 324.482 337.859 cv
320.563 336.849 316.717 335.395 313.371 333.076 cv
306.233 327.867 297.302 325.707 288.582 325.422 cv
285.338 325.817 281.907 325.664 278.901 327.113 cv
278.548 327.167 277.837 327.265 277.478 327.314 cv
279.37 327.649 281.226 328.148 283.026 328.817 cv
294.6 332.809 305.662 339.336 313.292 349.084 cv
319.735 357.141 323.186 367.358 323.526 377.628 cv
316.899 378.894 310.164 379.489 303.507 380.549 cv
277.976 384.096 252.458 387.661 226.92 391.129 cv
226.652 386.567 224.827 381.978 221.194 379.064 cv
216.333 374.834 209.743 373.752 203.573 372.889 cv
203.214 362.13 204.961 351.408 207.844 341.071 cv
213.868 319.671 226.798 299.987 245.144 287.209 cv
246.159 286.662 247.322 286.479 248.429 286.188 cv
253.911 284.891 258.755 281.782 263.136 278.351 cv
269.884 272.819 275.384 265.913 279.924 258.496 cv
282.716 253.944 284.998 249.102 287.754 244.526 cv
295.409 231.687 304.998 220.132 315.081 209.155 cv
324.926 198.909 335.191 188.997 346.617 180.515 cv
349.855 178.166 353.201 175.933 356.821 174.205 cv
351.376 171.26 345.881 168.327 340.034 166.252 cv
340.016 166.058 339.98 165.668 339.962 165.474 cv
358.154 148.674 379.098 134.764 401.879 125.017 cv
408.791 122.163 415.843 119.631 423.066 117.672 cv
.234501 1 .850614 .171969 cmyk
f
527.886 174.357 mo
537.129 165.4 549.609 159.937 562.381 158.659 cv
569.006 158.379 575.737 158.294 582.21 159.967 cv
589.707 161.658 596.778 164.811 603.415 168.638 cv
603.489 169.051 603.635 169.879 603.708 170.293 cv
599.71 169.446 595.603 169.672 591.569 169.13 cv
588.459 168.82 585.375 169.459 582.278 169.574 cv
578.402 169.77 574.599 170.633 570.857 171.595 cv
570.254 171.808 569.653 172.008 569.056 172.209 cv
562.764 174.357 556.685 178.568 554.319 185.03 cv
554.118 185.869 553.899 186.709 553.686 187.548 cv
553.667 188.559 553.661 189.569 553.661 190.585 cv
555.377 198.574 561.991 204.464 568.849 208.285 cv
568.837 208.991 568.897 209.71 568.764 210.409 cv
566.013 215.618 561.328 219.767 555.797 221.83 cv
553.151 222.42 550.497 223.211 547.759 223.065 cv
543.001 222.81 538.498 221.081 533.782 220.558 cv
525.1 219.195 515.864 220.711 508.404 225.468 cv
514.037 226.211 520.919 225.633 524.966 230.427 cv
528.222 234.048 532.779 236.044 537.069 238.161 cv
534.348 238.276 531.642 238.514 528.946 238.824 cv
525.921 238.094 522.77 238.709 519.74 238.027 cv
513.283 236.901 506.839 234.248 502.398 229.265 cv
497.992 224.507 495.772 217.954 495.608 211.529 cv
500.457 215.094 507.022 215.021 512.474 212.97 cv
515.474 212.38 518.522 212.094 521.577 212.088 cv
518.718 208.321 516.496 203.874 516.429 199.055 cv
516.118 189.593 521.168 180.71 527.886 174.357 cv
1 .889128 .391516 .40943 cmyk
f
539.24 173.578 mo
542.939 170.876 547.15 168.972 551.482 167.524 cv
545.313 172.033 539.477 177.642 536.927 185.036 cv
534.932 190.499 535.364 197.418 539.837 201.556 cv
542.939 204.257 547.004 206.326 548.598 210.36 cv
549.25 211.973 548.403 213.853 546.834 214.522 cv
541.255 215.471 534.92 214.138 531.038 209.776 cv
526.761 204.89 526.256 197.935 526.961 191.759 cv
528.379 184.324 533.052 177.819 539.24 173.578 cv
.0202335 .0159609 .0188907 0 cmyk
f
656.419 178.293 mo
658.001 181.36 659.905 184.257 661.08 187.53 cv
664.451 197.253 665.674 207.773 664.317 217.983 cv
663.721 225.267 659.072 231.79 652.835 235.43 cv
645.588 239.706 636.991 241.556 628.625 241.404 cv
633.449 233.555 639.595 226.332 642.668 217.527 cv
642.881 218.482 643.13 219.432 643.428 220.375 cv
644.731 223.68 644.238 227.287 644.19 230.743 cv
650.019 227.178 653.018 220.619 654.775 214.26 cv
655.038 213.079 655.288 211.893 655.585 210.714 cv
657.155 202.699 657.229 194.485 656.852 186.356 cv
656.51 183.678 656.383 180.99 656.419 178.293 cv
1 .889128 .391516 .40943 cmyk
f
385.961 199.134 mo
390.342 198.282 394.821 197.953 399.28 198.373 cv
404.276 199.11 409.272 200.138 413.914 202.195 cv
415.459 202.895 417.005 203.625 418.611 204.184 cv
411.291 204.227 403.965 204.634 396.718 205.718 cv
386.752 207.44 376.238 210.013 368.65 217.133 cv
363.131 222.36 357.898 227.884 352.21 232.934 cv
337.07 247.732 319.753 260.978 299.559 267.969 cv
297.027 268.572 296.115 271.292 295.677 273.555 cv
295.086 278.393 295.47 283.327 296.93 287.982 cv
299.82 297.036 306.149 305.147 314.935 309.067 cv
325.845 314.268 338.47 311.774 349.465 308.159 cv
357.722 305.135 365.541 301.016 372.885 296.196 cv
375.617 294.335 379 294.067 382.14 293.331 cv
387.373 292.194 392.751 292.345 398.07 292.498 cv
397.827 291.286 397.534 290.088 397.193 288.907 cv
389.995 287.477 382.718 289.254 375.502 289.571 cv
367.02 294.524 358.367 299.44 348.827 302.063 cv
340.052 304.442 330.542 305.112 321.841 302.063 cv
314.034 299.422 307.494 293.885 302.68 287.295 cv
304.122 287.489 305.565 287.812 306.878 288.469 cv
315.136 292.326 324.585 294.134 333.596 292.205 cv
347.067 289.558 358.464 281.125 368.547 272.217 cv
372.66 273.13 376.329 275.405 380.406 276.507 cv
385.419 277.784 390.755 279.361 395.91 277.961 cv
396.147 273.331 398.599 269.047 402.304 266.303 cv
403.12 266.357 403.941 266.419 404.775 266.48 cv
407.623 267.197 410.501 267.927 413.128 269.284 cv
415.903 270.531 418.234 272.509 420.857 274.011 cv
420.961 272.965 421.586 271.894 421.197 270.854 cv
420.364 267.915 417.552 266.272 415.137 264.751 cv
412.94 263.528 410.988 261.886 408.627 260.972 cv
409.588 260.802 410.548 260.608 411.511 260.395 cv
421.307 260.857 431.255 261.575 440.626 264.696 cv
437.919 263.023 435.837 260.456 432.783 259.342 cv
428.091 256.129 422.212 257.516 416.926 257.03 cv
412.162 255.734 408.224 252.447 403.503 251.042 cv
398.197 249.436 392.751 247.398 387.117 248.152 cv
385.382 248.377 383.947 249.473 382.755 250.677 cv
378.228 255.125 373.445 259.378 368.017 262.7 cv
367.001 263.322 365.845 263.723 364.653 263.796 cv
357.32 264.234 349.916 264.149 342.681 262.828 cv
339.231 264.075 335.896 265.664 332.313 266.54 cv
331.862 266.783 li
329.21 267.501 326.569 268.414 323.782 268.268 cv
329.752 262.852 336.268 257.784 343.886 254.918 cv
347.64 253.647 351.613 254.285 355.489 254.231 cv
358.774 254.188 362.018 254.827 365.31 254.723 cv
368.73 252.259 372.112 249.692 374.966 246.558 cv
376.773 244.726 378.361 242.335 381.021 241.702 cv
384.008 240.996 387.129 240.601 390.19 241.082 cv
396.999 241.776 403.673 243.4 410.214 245.366 cv
413.384 246.248 415.916 248.578 419.123 249.369 cv
424.319 250.811 429.771 250.629 435.052 251.535 cv
443.249 253.616 451.115 256.798 458.996 259.822 cv
462.932 261.185 466.036 264.107 469.01 266.911 cv
473.343 271.17 477.809 275.375 481.186 280.474 cv
480.541 290.569 479.646 300.723 476.714 310.465 cv
476.306 311.488 475.899 312.516 475.497 313.551 cv
474.378 313.014 473.276 312.449 472.236 311.785 cv
466.042 307.806 459.853 303.832 453.604 299.945 cv
453.66 300.303 453.775 301.022 453.83 301.387 cv
457.45 305.92 461.003 310.508 464.624 315.047 cv
466.121 316.982 467.89 318.759 468.822 321.071 cv
463.578 322.002 458.168 321.765 452.886 321.283 cv
440.152 320.645 427.532 318.369 415.185 315.224 cv
411.011 314.25 406.984 312.772 402.816 311.791 cv
400.047 307.867 399.159 303.005 397.589 298.545 cv
392.599 298.186 387.762 299.75 383.211 301.63 cv
376.189 304.6 369.66 308.585 363.168 312.547 cv
355.428 317.158 346.654 319.756 337.825 321.283 cv
330.494 322.671 322.936 321.515 316.018 318.868 cv
309.744 316.41 303.714 313.252 298.348 309.17 cv
295.872 307.252 293.292 305.215 291.941 302.305 cv
290.425 299.081 289.136 295.643 286.586 293.051 cv
286.202 289.485 285.199 286.023 284.718 282.476 cv
285.509 277.675 283.404 272.564 285.564 267.915 cv
288.089 262.202 294.387 259.78 299.875 257.833 cv
304.201 256.567 307.158 252.941 310.98 250.762 cv
322.145 245.219 331.315 236.61 341.391 229.417 cv
346.332 225.9 350.208 221.173 354.808 217.26 cv
363.612 208.986 373.944 201.677 385.961 199.134 cv
f
692.288 214.005 mo
696.444 210.451 697.71 204.805 698.019 199.584 cv
700.18 204.768 700.929 210.95 698.166 216.062 cv
694.375 223.138 686.843 227.336 679.407 229.618 cv
680.515 225.889 681.549 222.128 682.163 218.282 cv
685.741 217.455 689.526 216.616 692.288 214.005 cv
.0202335 .0159609 .0188907 0 cmyk
f
576.807 223.089 mo
577.069 223.071 577.598 223.023 577.861 222.998 cv
579.125 229.862 581.34 236.95 586.574 241.86 cv
591.064 246.412 597.69 247.945 603.903 247.659 cv
600.422 249.023 597.076 250.732 593.699 252.333 cv
593.936 259.184 593.705 266.151 591.685 272.753 cv
591.368 273.78 591.124 274.828 590.936 275.886 cv
589.756 271.182 588.971 266.376 587.407 261.776 cv
587.219 261.137 587.042 260.497 586.871 259.865 cv
586.622 259.44 li
585.911 257.188 584.943 255.04 583.818 252.971 cv
581.291 253.044 578.754 252.916 576.309 252.241 cv
573.863 251.17 571.496 249.649 570.2 247.233 cv
568.709 244.404 567.225 241.453 564.736 239.354 cv
561.376 236.512 557.27 234.601 552.998 233.622 cv
557.282 233.038 561.639 232.539 565.698 230.945 cv
570.054 229.442 573.838 226.588 576.807 223.089 cv
1 .889128 .391516 .40943 cmyk
f
573.205 244.264 mo
571.629 241.301 573.278 238.034 574.507 235.277 cv
575.408 237.011 576.381 238.709 577.452 240.351 cv
576.874 240.936 575.748 241.289 575.821 242.268 cv
575.754 244.97 578.237 246.831 580.537 247.702 cv
577.908 247.173 574.689 246.831 573.205 244.264 cv
.0202335 .0159609 .0188907 0 cmyk
f
474.122 254.827 mo
474.926 254.675 475.734 254.523 476.551 254.371 cv
497.305 255.801 518.144 259.421 537.524 267.215 cv
543.701 269.734 549.639 272.813 555.267 276.379 cv
555.322 276.556 555.432 276.908 555.486 277.078 cv
549.871 278.642 544.272 280.462 538.553 281.514 cv
519.295 269.272 497.676 260.723 475.248 256.482 cv
474.864 255.922 474.492 255.374 474.122 254.827 cv
1 .889128 .391516 .40943 cmyk
f
407.307 276.774 mo
408.98 278.058 410.69 279.293 412.412 280.516 cv
413.446 287.221 414.067 294.159 416.732 300.462 cv
423.237 304.217 430.453 306.632 437.694 308.537 cv
438.114 308.762 li
442.622 309.844 447.065 311.213 451.597 312.236 cv
452.108 312.297 451.926 312.832 451.926 313.191 cv
451.645 312.497 li
437.858 311.658 424.028 309.76 410.787 305.713 cv
409.132 296.142 407.787 286.485 407.307 276.774 cv
.0202335 .0159609 .0188907 0 cmyk
f
449.018 277.815 mo
456.812 286.65 464.672 295.424 472.455 304.265 cv
464.338 297.56 456.198 290.885 448.135 284.113 cv
448.354 282.002 448.689 279.908 449.018 277.815 cv
f
591.793 297.109 mo
591.702 293.793 592.944 290.039 596.369 288.864 cv
599.467 288.937 602.339 290.196 605.132 291.414 cv
608.423 292.935 611.733 294.851 613.717 298.003 cv
619.424 297.395 626.172 297.243 630.577 301.576 cv
624.273 301.211 617.915 300.693 611.642 301.648 cv
608.539 297.499 604.03 294.139 598.888 293.117 cv
595.871 292.515 592.968 294.371 591.793 297.109 cv
f
179.685 306.845 mo
190.144 301.174 200.988 296.24 211.562 290.788 cv
196.107 308.604 186.287 331.135 183.348 354.513 cv
176.965 355.231 170.26 353.807 164.973 350.082 cv
160.981 347.283 158.541 342.586 158.102 337.774 cv
157.5 331.774 158.608 325.379 162.252 320.45 cv
166.682 314.408 173.266 310.465 179.685 306.845 cv
1 .889128 .391516 .40943 cmyk
f
566.007 305.713 mo
567.059 305.135 568.125 304.568 569.183 303.991 cv
574.569 306.906 579.387 310.733 584.078 314.645 cv
576.552 311.391 568.221 310.672 560.111 310.568 cv
561.566 309.777 562.672 307.837 564.528 308.104 cv
567.376 308.324 570.162 309.114 573.04 308.968 cv
570.595 308.104 568.228 307.033 566.007 305.713 cv
.0202335 .0159609 .0188907 0 cmyk
f
515.382 335.954 mo
516.551 335.941 518.029 334.835 519.082 335.474 cv
519.38 335.771 519.97 336.373 520.263 336.678 cv
520.463 336.775 520.853 336.971 521.054 337.066 cv
519.186 336.562 517.299 336.166 515.382 335.954 cv
.423713 .332128 .299962 .00485237 cmyk
f
660.837 364.759 mo
667.359 365.082 671.32 370.765 675.854 374.658 cv
681.33 379.655 688.784 381.576 695.999 382.18 cv
694.266 382.69 692.531 383.196 690.785 383.652 cv
689.769 383.627 688.753 383.61 687.749 383.591 cv
684.451 383.062 681.22 382.003 677.856 381.967 cv
678.068 382.136 678.488 382.489 678.695 382.666 cv
681.877 387.874 687.159 391.622 689.398 397.446 cv
684.902 399.052 681.051 401.918 676.846 404.096 cv
672.343 396.315 665.838 389.11 657.229 385.922 cv
657.046 385.648 656.669 385.094 656.481 384.82 cv
658.051 378.163 659.442 371.457 660.837 364.759 cv
.234501 1 .850614 .171969 cmyk
f
698.525 389.571 mo
710.463 395.821 719.632 405.933 730.323 413.923 cv
725.194 411.258 720.259 408.233 715.506 404.96 cv
709.033 400.835 703.215 395.656 698.525 389.571 cv
.0202335 .0159609 .0188907 0 cmyk
f
181.663 396.095 mo
184.675 396.04 187.669 395.596 190.674 395.468 cv
191.915 395.328 192.999 396.241 193.163 397.458 cv
193.601 401.116 193.047 404.796 192.506 408.416 cv
190.9 416.381 189.293 424.425 186.16 431.964 cv
185.369 433.656 184.644 435.524 183.16 436.734 cv
179.856 438.468 176.01 438.499 172.408 439.126 cv
174.593 427.248 177.44 415.493 179.874 403.664 cv
180.421 401.126 180.878 398.565 181.663 396.095 cv
1 .889128 .391516 .40943 cmyk
f
169.815 449.615 mo
173.521 449.268 177.238 448.477 180.969 449.001 cv
182.289 449.262 183.743 450.048 183.999 451.508 cv
184.601 455 183.761 458.511 183.372 461.979 cv
182.045 468.514 181.254 475.304 178.2 481.329 cv
177.099 483.512 175.425 485.655 172.992 486.379 cv
169.42 487.45 165.684 487.857 161.972 488.047 cv
164.138 476.223 166.943 464.523 169.207 452.719 cv
169.456 452.317 li
169.565 451.404 169.688 450.51 169.815 449.615 cv
f
629.238 452.007 mo
632.884 451.155 636.649 451.021 640.343 450.443 cv
642.71 450.029 645.113 449.986 647.517 450.005 cv
644.882 451.398 642.527 453.224 640.057 454.885 cv
639.748 456.437 639.425 457.994 639.126 459.552 cv
637.958 464.681 637.094 469.877 635.888 474.994 cv
632.262 475.543 628.673 476.528 625.021 476.698 cv
620.422 474.022 615.962 471.101 611.411 468.345 cv
609.262 467.114 607.309 465.351 604.778 464.986 cv
604.68 465.6 604.584 466.221 604.498 466.848 cv
603.391 470.991 602.764 475.244 601.638 479.382 cv
597.938 480.028 594.191 480.343 590.448 480.599 cv
590.644 476.339 591.975 472.263 592.755 468.095 cv
593.741 463.964 594.313 459.729 595.596 455.676 cv
598.967 455.269 602.369 455.049 605.715 454.441 cv
612.025 457.75 617.952 461.767 624.128 465.326 cv
624.845 465.703 625.636 465.946 626.422 466.209 cv
627.207 462.57 627.913 458.913 628.625 455.263 cv
628.843 454.18 629.044 453.09 629.238 452.007 cv
.234501 1 .850614 .171969 cmyk
f
551.964 461.019 mo
561.56 460.014 571.094 458.135 580.757 458.042 cv
581.669 458.561 582.588 459.095 583.5 459.644 cv
583.786 463.659 582.521 467.504 581.681 471.381 cv
580.89 474.368 580.694 477.623 578.858 480.227 cv
576.448 481.786 573.746 482.857 570.874 483.106 cv
562.161 484.098 553.473 485.26 544.765 486.282 cv
540.372 486.726 535.973 487.797 531.544 487.207 cv
530.448 487.042 529.852 485.978 529.085 485.308 cv
530.016 479.808 531.196 474.35 532.36 468.892 cv
532.84 466.428 534.732 464.488 537.044 463.623 cv
541.809 461.804 546.981 461.804 551.964 461.019 cv
f
544.035 467.852 mo
553.064 466.191 562.234 465.369 571.33 464.067 cv
570.917 468.581 569.457 472.92 568.617 477.368 cv
559.679 478.378 550.807 480.081 541.832 480.678 cv
542.143 477.636 542.824 474.655 543.475 471.678 cv
543.701 470.407 543.877 469.129 544.035 467.852 cv
1 .889128 .391516 .40943 cmyk
f
488.135 469.104 mo
496.855 467.992 505.592 466.963 514.318 465.875 cv
516.617 465.685 518.918 465.838 521.225 465.88 cv
522.113 466.793 522.69 467.93 523.099 469.135 cv
522.842 470.091 522.617 471.059 522.404 472.031 cv
518.887 472.013 515.432 471.009 511.908 471.398 cv
509.449 471.69 506.998 472.007 504.558 472.378 cv
499.216 473.053 493.873 473.723 488.55 474.544 cv
488.471 475.573 488.391 476.601 488.312 477.641 cv
493.374 477.703 498.315 476.461 503.348 476.096 cv
508.641 475.268 514.001 474.576 519.374 475.086 cv
520 475.579 520.634 476.073 521.279 476.565 cv
521.37 478.19 521.424 479.851 520.907 481.414 cv
520.785 482.047 520.682 482.68 520.592 483.325 cv
519.574 487.182 515.9 489.549 512.11 490.042 cv
501.284 491.46 490.448 492.781 479.647 494.406 cv
477.719 494.612 475.51 494.544 474.013 493.146 cv
472.529 491.678 473.781 489.562 474.013 487.846 cv
478.71 487.785 483.444 488.266 488.105 487.467 cv
495.267 486.5 502.428 485.516 509.596 484.616 cv
509.889 483.434 510.198 482.272 510.485 481.098 cv
503.804 481.712 497.172 482.765 490.514 483.569 cv
486.261 484.078 481.778 484.864 477.615 483.422 cv
477.256 482.194 476.989 480.932 476.971 479.656 cv
477.895 477.094 477.682 473.93 479.928 472.02 cv
482.215 470.115 485.276 469.58 488.135 469.104 cv
.234501 1 .850614 .171969 cmyk
f
458.345 472.414 mo
461.509 471.86 464.709 471.429 467.928 471.313 cv
466.504 479.717 464.715 488.064 462.903 496.394 cv
459.032 496.997 455.114 497.288 451.213 497.593 cv
452.662 489.238 454.403 480.933 456.227 472.652 cv
456.928 472.573 457.633 472.493 458.345 472.414 cv
f
396.269 480.106 mo
408.823 478.408 421.412 476.929 433.964 475.207 cv
437.262 474.91 440.676 474.72 443.881 475.718 cv
445.123 477.464 445.415 479.514 444.485 481.474 cv
444.26 482.052 444.045 482.637 443.845 483.226 cv
443.061 483.841 442.276 484.456 441.491 485.064 cv
441.521 485.271 441.588 485.685 441.619 485.892 cv
442.148 486.561 443.03 487.151 442.92 488.136 cv
442.909 490.663 442.276 493.175 441.381 495.53 cv
440 497.969 437.14 498.901 434.67 499.844 cv
423.036 501.949 411.196 502.551 399.476 504.061 cv
398.058 504.238 396.635 504.286 395.217 504.352 cv
395.722 501.566 396.336 498.803 396.993 496.059 cv
397.62 491.934 399.184 487.949 399.165 483.738 cv
397.377 482.649 395.666 481.383 393.671 480.683 cv
394.535 480.501 395.399 480.306 396.269 480.106 cv
f
418.18 482.497 mo
423.176 481.968 428.147 481.061 433.185 481 cv
433.155 481.852 433.131 482.71 433.118 483.574 cv
427.812 484.821 422.336 485.071 416.957 485.88 cv
414.809 485.977 412.588 486.884 410.494 486.05 cv
410.72 485.192 410.951 484.334 411.183 483.489 cv
413.477 482.935 415.844 482.826 418.18 482.497 cv
1 .889128 .391516 .40943 cmyk
f
409.522 491.63 mo
417.043 491.132 424.465 489.258 432.036 489.567 cv
431.786 490.98 431.481 492.385 431.177 493.789 cv
430.971 494.082 430.543 494.661 430.338 494.952 cv
429.115 495.068 427.897 495.184 426.687 495.336 cv
420.657 496.103 414.614 496.839 408.579 497.606 cv
408.653 495.579 408.993 493.577 409.522 491.63 cv
f
0 0 0 0 cmyk
%ADOBeginSubsetFont: FAAAAA+BirchStd Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /FAAAAA+BirchStd def
/FontInfo 7 dict dup begin
/Notice (Copyright 1990, 1991, 1993, 2001, 2002 Adobe Systems Incorporated. All rights reserved. Birch is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def
/Weight (Regular) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 66 /B put
def
/FontBBox {-81 -250 1000 926} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0 750 750 556 556] def
/OtherBlues [300 300 416 416 -132 -132] def
/StdHW [38] def
/StdVW [70] def
/StemSnapH [38 50] def
/StemSnapV [70 77] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/B <1C60D8A8C9B821B355D59BFA7356FB1D36C58EC416498860E024EA007ACF
80CF992BFA8ACEE852A40C12698514AD51DB965BDCAD00CBDF257F97A08F4C56
4700A54CC1FCA09F7A7546031178A88D3AFBCC651A8F5D116E43DF566D101500
AADF66045971603CAC6AE8B65C7A34803A76E9C85ECAAB32A551616B5AFC8273
1432C892A48CDEA09FE61C6469DEEF1C35DAE5A4> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/CDCSNU+BirchStd /FAAAAA+BirchStd findfont ct_VMDictPut
/CDCSNU+BirchStd*1 
[66{/.notdef}rp /B 189{/.notdef}rp]
CDCSNU+BirchStd nf
CDCSNU+BirchStd*1 [288.719 -42.3411 37.8958 -155.197 0 0 ]msf
112.29 510.685 mo
(B)sh
131.764 497.054 mo
131.309 498.917 130.391 500.398 128.105 501.781 cv
118.344 507.551 li
117.615 508.258 116.096 508.779 115.982 509.244 cv
115.868 509.71 116.331 510.091 117.487 509.922 cv
162.816 503.274 li
186.49 499.803 202.386 487.146 207.881 464.643 cv
212.087 447.416 202.996 442.464 192.495 441.011 cv
204.664 435.635 216.248 428.1 220.606 410.253 cv
225.191 391.474 212.025 383.829 181.999 388.232 cv
145.909 393.525 li
144.753 393.694 144.063 394.244 143.949 394.71 cv
143.835 395.175 145.165 395.429 145.628 395.81 cv
153.192 399.04 li
154.947 399.83 155.184 401.142 154.729 403.005 cv
cp
177.794 396.331 mo
182.124 395.696 li
196.272 393.621 201.084 397.852 197.219 413.682 cv
192.671 432.306 185.131 439.248 170.983 441.323 cv
166.652 441.958 li
cp
164.758 449.718 mo
169.088 449.083 li
183.236 447.008 187.896 451.862 184.183 467.07 cv
179.066 488.022 174.815 494.033 162.112 495.896 cv
153.162 497.208 li
cp
.423713 .332128 .299962 .00485237 cmyk
2 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
gsave
[.98942 -.1451 -.23721 .97146 131.764 497.054 ]ct
@
grestore newpath
0 0 0 0 cmyk
%ADOBeginSubsetFont: FAAAAA+BirchStd AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
CDCSNU+BirchStd dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/E <1C60D8A8C9B8377678B05440D99282E218964A059904A73C6E74E70F1397
F70B9DA647BBE324025413AE0FEB99130B6703917EC7B089517CAD98DFB3B24E
C3924E9C010D6E856F0D6BE3CEDDE4880F40E77FC83C72298C869762079A35FC
BCC64983347B04373C9BCD6B62636C3D945D2CCCB876E09CE0A63EFF03AF7C3E
DF861FE1A6B27F27E25281575952647340594D92626DC3C8B7822A6D05AE8D9A
B8EB81D0B5326F727B61396F0D9E954E491489A5A1E7831E45E8FDBEA1BAC504
82185799E0F96E84FF5D82C2> |-
/G <1C60D8A8C9B820E2A226945032BD7D44BE38B7737343AD3DE5F937CDF514
4A57956DDD5D4A5E1541447D71EED22B9FE0FFD4BC8D93FEDD93438E89D20EB0
60DD16491D7846661A6B0EE82355F69308438D2459CAF013374D0FA02AE0D9BD
0A047832948B60C18800FCE5E531ABFE4526F3E7D515FFB1170D31CD8D6E88DE
0C8106A8D6B49E8FE4C303199CBF2312C4657D188F5D6FB4F30AF48E42B06A53
784C1720F5362404A7BA59F06076F1A7CF2DE3A9D6A8C5872E0FEAB47569C7D8
FC7C9DCC0AC0613FA930E64555A7> |-
/N <1C60D8A8C9B806F56D5CC351741EAC72E0F43056F6B056D35D43ED1043D3
20DE51B7BB623EF0948D4FDCD86B21CCA696E6F73D5EEED21DEA099C06A65A47
110B43424C5CB6B89284B82F49C33D0792112C106E4712A9B3ACD8B3528D6F39
53904127572F1A7CC78FA33B3C6244A6C1B7E69B47C82AB186434870817B455A
099CA46D92ED505B074287951D26107EBA256DBC258F018B994109D72303C373
319CD308272E044DA8806A9328D05C10F35BEDA37C8BB8B5F0C56EB149E8F3> |-
/R <1C60D8A8C9B816D29A5416D2CA534F7795583977D971BD23B21455C3B241
9C07BF3544A49847F334DF07A5F156C8C2776CC2A37E29576D11E111CFEA8C6B
CC06F35013A81B109A84BCB9AB76985330AB20793198629DC86E238F50520BA6
9E68FF0ACA6B7173A7D9A2EF1842527287CE16E88D10A4B278DF25D603745F4D
CF53B1A388A6F7DB7EA837D8DE2E373165AF62922F5300F9F4376964D0C44440
A73D10CC286C3930341B20BEF5757CE06C3FFC42510F57EA18488A29729BCF65
3B61A09BCF145E7B2FCDF1DFAD56C35EBD8B1CEC> |-
/S <1C60D8A8C9B854D088A0D0CA9350CBD3D5226F4F6955140F45DFCBA9353B
F063CCA8B1CA785D64692F654563DA5AB3B4095DFE7EA0D2FDC674C16DBE1EFA
36074DA51999E63CF736F00047E407040FAD6A18DDE08B3473BCA30B1E9F6E23
B787F094889F68228643DCF4EFAFD16FA0F1279A9CAA4842781AE2AAE2EAADAE
8F81606071BF4929FAB2B8D4D946348965B082DB9AB015C5DA85B3CDC75AFE3D
A64A4255BD5BD288ED4FC8AA7B5AEEE9E9A898DD4458A7FC8E0CAF41446DFCF0
91967B5D6D06D4F5359D705766573F9D96485964ACCD526771B2563CF96EB902
F3F73CFCB195D90B5E455E0BB980227D38FF3FC7D99400> |-
systemdict /gcheck known {setglobal} if end {end} if
end
CDCSNU+BirchStd /Encoding get
dup 69 /E put
dup 71 /G put
dup 78 /N put
dup 82 /R put
dup 83 /S put
pop
%ADOEndSubsetFont
/CDCSNU+BirchStd*1 
[66{/.notdef}rp /B 2{/.notdef}rp /E /.notdef /G 6{/.notdef}rp /N 
3{/.notdef}rp /R /S 172{/.notdef}rp]
CDCSNU+BirchStd nf
CDCSNU+BirchStd*1 [222.488 -32.6281 29.2026 -119.595 0 0 ]msf
210.741 496.247 mo
(ERGENS)
[70.9748 -10.4086 76.0899 -11.1587 75.6461 -11.0936 70.9748 -10.4085 81.4311 -11.942 0 0 
]xysh
261.22 408.125 mo
273.901 406.265 li
276.793 405.841 278.621 406.264 279.13 407.689 cv
285.656 428.411 li
285.761 428.857 286.341 429.118 287.23 428.987 cv
287.898 428.889 288.401 428.585 288.518 428.106 cv
295.789 398.327 li
295.935 397.73 295.162 397.382 294.273 397.512 cv
236.648 405.963 li
235.759 406.094 235.226 406.517 235.138 406.876 cv
235.051 407.234 236.075 407.43 236.433 407.723 cv
242.261 410.213 li
243.614 410.822 243.796 411.832 243.446 413.268 cv
225.749 485.743 li
225.398 487.178 224.69 488.319 222.928 489.385 cv
215.407 493.832 li
214.845 494.375 213.675 494.778 213.587 495.138 cv
213.499 495.496 213.857 495.79 214.746 495.659 cv
272.371 487.208 li
273.483 487.045 274.267 486.469 274.413 485.87 cv
281.743 455.853 li
281.83 455.494 281.474 455.2 280.806 455.298 cv
280.139 455.396 279.413 455.733 279.073 456.244 cv
261.453 480.969 li
260.212 482.533 257.811 483.578 254.919 484.002 cv
242.238 485.862 li
251.116 449.505 li
256.009 448.788 li
257.122 448.624 257.954 448.733 258.253 449.265 cv
263.685 456.886 li
264.014 457.3 264.148 457.626 265.039 457.495 cv
265.706 457.397 265.987 457.126 266.075 456.766 cv
272.266 431.412 li
272.382 430.934 272.218 430.728 271.551 430.826 cv
270.883 430.924 270.602 431.195 270.04 431.739 cv
260.209 441.253 li
259.619 441.915 258.67 442.285 257.557 442.448 cv
252.664 443.166 li
cp
.423713 .332128 .299962 .00485237 cmyk
gsave
[.98942 -.1451 -.23721 .97146 261.22 408.125 ]ct
@
grestore newpath
322.146 438.857 mo
325.927 438.303 li
333.714 437.161 338.758 440.227 337.473 445.488 cv
331.194 471.202 li
330.201 475.268 333.331 478.269 343.564 476.768 cv
355.134 475.071 li
356.246 474.908 357.36 474.745 357.447 474.386 cv
357.535 474.028 356.761 473.68 355.987 473.332 cv
349.861 470.31 li
348.895 469.875 348.18 469.287 348.384 468.451 cv
354.488 443.456 li
356.094 436.877 350.558 433.192 343.519 432.15 cv
351.949 428.376 361.939 421.722 365.181 408.447 cv
368.977 392.899 358.57 388.083 335.431 391.477 cv
307.62 395.555 li
306.73 395.686 306.197 396.11 306.11 396.468 cv
306.022 396.827 307.047 397.023 307.404 397.316 cv
313.232 399.805 li
314.585 400.414 314.767 401.425 314.417 402.86 cv
296.72 475.335 li
296.37 476.77 295.661 477.912 293.9 478.977 cv
286.378 483.424 li
285.845 483.849 284.646 484.371 284.558 484.73 cv
284.47 485.088 284.828 485.382 285.718 485.251 cv
320.648 480.129 li
321.539 479.998 322.071 479.574 322.159 479.216 cv
322.247 478.856 321.221 478.661 320.865 478.367 cv
315.036 475.878 li
313.683 475.27 313.502 474.257 313.852 472.823 cv
cp
332.191 397.717 mo
335.528 397.228 li
346.43 395.629 349.916 398.923 346.938 411.122 cv
343.434 425.473 337.844 430.79 326.943 432.389 cv
323.606 432.878 li
cp
gsave
[.98942 -.1451 -.23721 .97146 322.146 438.857 ]ct
@
grestore newpath
410.093 445.908 mo
407.319 457.269 401.314 462.533 394.417 463.544 cv
386.406 464.719 385.373 458.412 393.783 423.969 cv
399.944 398.735 405.388 386.983 414.733 385.612 cv
424.522 384.177 430.322 398.2 432.805 406.486 cv
433.074 407.137 433.625 407.517 434.515 407.387 cv
435.182 407.289 435.714 406.865 435.831 406.387 cv
442.84 377.685 li
443.132 376.489 442.892 375.717 441.779 375.88 cv
440.667 376.043 439.186 376.836 436.95 378.087 cv
434.463 379.489 432.033 380.653 430.921 380.816 cv
430.03 380.947 428.561 380.816 427.759 380.588 cv
425.767 379.957 421.756 378.816 414.413 379.893 cv
387.048 383.906 379.16 411.815 375.568 426.525 cv
370.691 446.498 365.146 473.602 392.957 469.524 cv
397.85 468.806 402.651 466.718 407.878 463.761 cv
408.855 463.272 409.552 463.055 410.22 462.957 cv
411.109 462.826 411.526 462.88 412.328 463.108 cv
418.214 465.359 li
418.601 465.532 419.433 465.641 420.322 465.51 cv
420.99 465.412 421.493 465.108 421.58 464.75 cv
430.75 427.197 li
431.042 426 431.914 425.066 433.618 424.239 cv
440.771 420.423 li
441.555 419.847 442.059 419.542 442.176 419.063 cv
442.292 418.585 441.683 418.444 440.793 418.575 cv
407.864 423.404 li
406.752 423.567 406.026 423.904 405.909 424.382 cv
405.792 424.861 405.956 425.068 406.729 425.415 cv
412.259 427.371 li
413.642 427.861 414.356 428.447 414.064 429.644 cv
cp
gsave
[.98942 -.1451 -.23721 .97146 410.093 445.908 ]ct
@
grestore newpath
483.925 375.465 mo
496.606 373.605 li
499.498 373.181 501.326 373.604 501.836 375.029 cv
508.361 395.75 li
508.466 396.197 509.046 396.457 509.936 396.327 cv
510.603 396.229 511.106 395.925 511.223 395.446 cv
518.494 365.667 li
518.64 365.069 517.867 364.722 516.978 364.852 cv
459.353 373.303 li
458.464 373.434 457.931 373.857 457.843 374.216 cv
457.756 374.574 458.78 374.77 459.138 375.063 cv
464.966 377.553 li
466.319 378.162 466.501 379.172 466.151 380.608 cv
448.454 453.083 li
448.103 454.518 447.395 455.659 445.634 456.725 cv
438.112 461.172 li
437.55 461.715 436.38 462.117 436.292 462.478 cv
436.204 462.836 436.562 463.129 437.451 462.999 cv
495.076 454.548 li
496.188 454.385 496.972 453.809 497.118 453.21 cv
504.448 423.193 li
504.536 422.833 504.179 422.54 503.511 422.638 cv
502.844 422.736 502.118 423.073 501.778 423.584 cv
484.158 448.309 li
482.917 449.873 480.516 450.918 477.624 451.342 cv
464.943 453.202 li
473.821 416.845 li
478.714 416.128 li
479.827 415.964 480.66 416.073 480.958 416.605 cv
486.39 424.226 li
486.719 424.64 486.854 424.966 487.744 424.835 cv
488.411 424.737 488.692 424.466 488.78 424.106 cv
494.971 398.752 li
495.087 398.274 494.923 398.068 494.256 398.166 cv
493.588 398.263 493.307 398.535 492.745 399.078 cv
482.914 408.592 li
482.324 409.255 481.375 409.625 480.262 409.788 cv
475.369 410.505 li
cp
gsave
[.98942 -.1451 -.23721 .97146 483.925 375.465 ]ct
@
grestore newpath
518.313 442.838 mo
517.963 444.274 517.061 445.329 515.494 446.48 cv
509.084 450.765 li
508.551 451.189 507.351 451.71 507.234 452.189 cv
507.176 452.428 507.534 452.721 508.424 452.591 cv
537.792 448.284 li
538.683 448.153 539.214 447.73 539.273 447.491 cv
539.39 447.012 538.588 446.784 538.007 446.523 cv
532.877 443.816 li
531.523 443.208 531.091 442.349 531.441 440.913 cv
545.984 381.354 li
546.428 381.289 li
556.544 442.651 li
556.773 444.347 558.261 445.282 560.263 444.989 cv
569.608 443.618 li
571.165 443.39 571.95 442.814 572.154 441.976 cv
591.633 362.206 li
591.983 360.771 592.884 359.717 594.452 358.564 cv
600.861 354.28 li
601.617 353.824 602.595 353.335 602.711 352.856 cv
602.77 352.617 602.411 352.324 601.522 352.454 cv
572.153 356.761 li
571.263 356.891 570.731 357.315 570.673 357.554 cv
570.556 358.033 571.581 358.228 571.938 358.522 cv
577.292 361.196 li
578.644 361.806 578.855 362.696 578.505 364.131 cv
567.554 408.981 li
567.109 409.046 li
559.197 360.621 li
559.044 359.491 558.581 358.751 557.023 358.98 cv
530.326 362.895 li
529.435 363.026 528.903 363.449 528.844 363.688 cv
528.727 364.167 529.752 364.363 530.11 364.656 cv
534.826 367.308 li
535.926 368.07 536.361 368.928 536.01 370.363 cv
cp
gsave
[.98942 -.1451 -.23721 .97146 518.313 442.838 ]ct
@
grestore newpath
660.379 345.091 mo
660.554 344.374 660.255 343.841 659.143 344.004 cv
657.807 344.2 656.327 344.994 654.09 346.243 cv
651.826 347.613 649.396 348.777 648.506 348.908 cv
647.616 349.038 646.369 348.875 645.343 348.68 cv
642.357 347.734 637.784 347.136 633.556 347.756 cv
622.21 349.42 612.211 354.346 609.437 365.707 cv
607.305 374.437 609.536 382.875 618.222 394.746 cv
627.398 407.239 631.942 414.989 629.985 423.003 cv
629.08 426.71 626.241 429.548 622.014 430.167 cv
608.888 432.093 605.698 417.916 604.03 408.936 cv
603.895 408.61 603.568 408.196 602.9 408.294 cv
602.009 408.425 601.671 408.936 601.583 409.295 cv
594.224 439.432 li
594.137 439.791 594.3 439.998 595.19 439.867 cv
596.08 439.737 597.087 439.127 598.064 438.639 cv
602.952 436.193 604.937 435.093 605.827 434.963 cv
606.494 434.865 607.742 435.028 609.984 435.507 cv
612.421 436.071 615.882 436.833 621.889 435.952 cv
630.12 434.745 643.293 429.123 646.388 416.445 cv
648.695 406.998 647.879 403.312 636.626 387.896 cv
624.747 371.534 623.285 366.098 624.716 360.238 cv
625.475 357.129 626.534 354.552 632.096 353.736 cv
642.331 352.236 649.33 365.738 650.526 374.903 cv
650.63 375.348 650.988 375.642 651.655 375.544 cv
652.546 375.413 653.049 375.109 653.137 374.75 cv
cp
gsave
[.98942 -.1451 -.23721 .97146 660.379 345.091 ]ct
@
grestore newpath
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/CDCSNU+BirchStd*1 uf
/CDCSNU+BirchStd uf
/FAAAAA+BirchStd uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
